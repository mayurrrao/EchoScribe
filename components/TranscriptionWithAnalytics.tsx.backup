import React, { useState, useMemo } from 'react'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts'

interface TranscriptionWithAnalyticsProps {
  transcription: string
  rawTranscription?: string // Original with filler words
  fillerWordsRemoved?: boolean
  fileName?: string
  duration?: number // in minutes
}

interface SpeechAnalytics {
  overallScore: number
  totalWords: number
  wordsPerMinute: number
  paceAnalysis: {
    paceCategory: string
    paceScore: number
    paceRecommendation: string
  }
  fillerWordAnalysis: {
    totalFillerWords: number
    fillerWordPercentage: number
    fillerWordScore: number
    fillerWordFeedback: string
    fillerWordCounts: Record<string, number>
  }
  vocabularyAnalysis: {
    uniqueWords: number
    vocabularyDiversity: number
    vocabularyScore: number
    vocabularyFeedback: string
    wordComplexityDistribution: Record<string, number>
  }
  confidenceAnalysis: {
    confidenceScore: number
    confidenceFeedback: string
    confidenceWords: number
    uncertaintyWords: number
  }
  recommendations: string[]
}

export default function TranscriptionWithAnalytics({ 
  transcription,
  rawTranscription,
  fillerWordsRemoved = false,
  fileName = "audio-file", 
  duration = 2.5 
}: TranscriptionWithAnalyticsProps) {
  const [copied, setCopied] = useState(false)
  const [activeTab, setActiveTab] = useState<'transcription' | 'analytics'>('transcription')
  const [showFillerWords, setShowFillerWords] = useState(false)

  // Determine which transcription to show
  const displayTranscription = (showFillerWords && rawTranscription) ? rawTranscription : transcription

  // Calculate speech analytics from RAW transcription (always use original for analytics)
  const analyticsText = rawTranscription || transcription
  const analytics = useMemo(() => calculateSpeechAnalytics(analyticsText, duration), [analyticsText, duration])

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(displayTranscription)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy text: ', err)
    }
  }

  const downloadTxt = () => {
    const element = document.createElement('a')
      const downloadTranscription = () => {
    const file = new Blob([displayTranscription], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = `transcription-${fileName}-${Date.now()}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  const downloadAnalytics = () => {
    const analyticsReport = generateAnalyticsReport(analytics, analyticsText, fileName)
    const element = document.createElement('a')
    const file = new Blob([analyticsReport], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = `speech-analytics-${fileName}-${Date.now()}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  const getScoreColor = (score: number) => {
    if (score >= 8) return '#10B981' // Green
    if (score >= 6) return '#F59E0B' // Yellow
    return '#EF4444' // Red
  }

  const getScoreGrade = (score: number) => {
    if (score >= 9) return 'A+'
    if (score >= 8) return 'A'
    if (score >= 7) return 'B+'
    if (score >= 6) return 'B'
    if (score >= 5) return 'C+'
    if (score >= 4) return 'C'
    return 'D'
  }

  // Prepare data for charts
  const radarData = [
    { subject: 'Pace', score: analytics.paceAnalysis.paceScore, fullMark: 10 },
    { subject: 'Clarity', score: analytics.fillerWordAnalysis.fillerWordScore, fullMark: 10 },
    { subject: 'Vocabulary', score: analytics.vocabularyAnalysis.vocabularyScore, fullMark: 10 },
    { subject: 'Confidence', score: analytics.confidenceAnalysis.confidenceScore, fullMark: 10 },
  ]

  const fillerWordData = Object.entries(analytics.fillerWordAnalysis.fillerWordCounts)
    .map(([word, count]) => ({ word, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 6)

  const vocabularyDistributionData = Object.entries(analytics.vocabularyAnalysis.wordComplexityDistribution)
    .map(([complexity, count]) => ({ complexity, count }))

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4']

  return (
    <div className="medium-card">
      {/* Header with Tabs */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
          <button
            onClick={() => setActiveTab('transcription')}
            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'transcription'
                ? 'bg-white text-gray-900 shadow-sm'
                : 'text-gray-500 hover:text-gray-900'
            }`}
          >
            📄 Transcription
          </button>
          <button
            onClick={() => setActiveTab('analytics')}
            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'analytics'
                ? 'bg-white text-gray-900 shadow-sm'
                : 'text-gray-500 hover:text-gray-900'
            }`}
          >
            📊 Speech Analytics
          </button>
        </div>

        <div className="flex items-center space-x-3">
          {activeTab === 'transcription' && (
            <>
              <button
                onClick={copyToClipboard}
                className="medium-button-secondary text-sm"
              >
                {copied ? (
                  <>
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    Copied!
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    Copy
                  </>
                )}
              </button>
              <button
                onClick={downloadTxt}
                className="medium-button-primary text-sm"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Download Text
              </button>
            </>
          )}
          {activeTab === 'analytics' && (
            <button
              onClick={downloadAnalytics}
              className="medium-button-primary text-sm"
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a4 4 0 01-4-4V5a4 4 0 014-4h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a4 4 0 01-4 4z" />
              </svg>
              Download Report
            </button>
          )}
        </div>
      </div>

      <div className="medium-divider"></div>

      {/* Content based on active tab */}
      {activeTab === 'transcription' ? (
        /* Transcription Tab */
        <div>
          {/* Filler Words Toggle (show only if we have both versions) */}
          {fillerWordsRemoved && rawTranscription && (
            <div className="mb-4 flex items-center justify-between bg-blue-50 rounded-lg p-3">
              <div className="flex items-center space-x-3">
                <span className="text-sm font-medium text-blue-900">
                  {showFillerWords ? 'Showing original transcript with filler words' : 'Showing cleaned transcript'}
                </span>
                <div className="text-xs text-blue-700 bg-blue-100 px-2 py-1 rounded-full">
                  Analytics use original transcript
                </div>
              </div>
              <button
                onClick={() => setShowFillerWords(!showFillerWords)}
                className="px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                {showFillerWords ? 'Hide Filler Words' : 'Show Filler Words'}
              </button>
            </div>
          )}

          <div className="bg-medium-gray-50 rounded-lg p-6 max-h-96 overflow-y-auto mb-6">
            <div className="medium-prose">
              <p className="text-medium-text leading-relaxed whitespace-pre-wrap">
                {displayTranscription}
              </p>
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{analytics.totalWords}</div>
              <div className="text-sm text-blue-800">Total Words</div>
            </div>
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{Math.round(analytics.wordsPerMinute)}</div>
              <div className="text-sm text-green-800">Words/Min</div>
            </div>
            <div className="text-center p-4 bg-purple-50 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">{analytics.vocabularyAnalysis.uniqueWords}</div>
              <div className="text-sm text-purple-800">Unique Words</div>
            </div>
            <div className="text-center p-4 bg-indigo-50 rounded-lg">
              <div 
                className="text-2xl font-bold"
                style={{ color: getScoreColor(analytics.overallScore) }}
              >
                {analytics.overallScore.toFixed(1)}
              </div>
              <div className="text-sm text-gray-600">Speaking Score</div>
            </div>
          </div>

          <div className="text-sm text-medium-light">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-6">
                <span>Character count: {transcription.length}</span>
                <span>Duration: {duration.toFixed(1)} minutes</span>
              </div>
              <button
                onClick={() => setActiveTab('analytics')}
                className="text-blue-600 hover:text-blue-800 font-medium"
              >
                View detailed analytics →
              </button>
            </div>
          </div>
        </div>
      ) : (
        /* Analytics Tab */
        <div className="space-y-8">
          {/* Overall Score Card */}
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-2xl font-bold text-gray-900">Speaking Performance</h3>
                <p className="text-gray-600 mt-1">Your comprehensive speaking assessment</p>
              </div>
              <div className="text-center">
                <div 
                  className="text-5xl font-bold mb-2"
                  style={{ color: getScoreColor(analytics.overallScore) }}
                >
                  {analytics.overallScore.toFixed(1)}
                </div>
                <div 
                  className="text-xl font-semibold px-3 py-1 rounded-lg text-white"
                  style={{ backgroundColor: getScoreColor(analytics.overallScore) }}
                >
                  Grade {getScoreGrade(analytics.overallScore)}
                </div>
              </div>
            </div>
          </div>

          {/* Performance Charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Radar Chart */}
            <div className="bg-white border rounded-lg p-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">Performance Overview</h4>
              <ResponsiveContainer width="100%" height={250}>
                <RadarChart data={radarData}>
                  <PolarGrid />
                  <PolarAngleAxis dataKey="subject" />
                  <PolarRadiusAxis angle={90} domain={[0, 10]} />
                  <Radar
                    name="Score"
                    dataKey="score"
                    stroke="#3B82F6"
                    fill="#3B82F6"
                    fillOpacity={0.3}
                    strokeWidth={2}
                  />
                </RadarChart>
              </ResponsiveContainer>
            </div>

            {/* Filler Words Chart */}
            <div className="bg-white border rounded-lg p-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">Filler Words Analysis</h4>
              {fillerWordData.length > 0 ? (
                <ResponsiveContainer width="100%" height={250}>
                  <BarChart data={fillerWordData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="word" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="count" fill="#F59E0B" />
                  </BarChart>
                </ResponsiveContainer>
              ) : (
                <div className="flex items-center justify-center h-64 text-gray-500">
                  <div className="text-center">
                    <div className="text-4xl mb-2">🎉</div>
                    <div>Excellent! No filler words detected.</div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Detailed Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {/* Speaking Pace */}
            <div className="bg-white border rounded-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <h4 className="text-lg font-semibold text-gray-900">Speaking Pace</h4>
                <div 
                  className="px-3 py-1 rounded-full text-sm font-medium text-white"
                  style={{ backgroundColor: getScoreColor(analytics.paceAnalysis.paceScore) }}
                >
                  {analytics.paceAnalysis.paceCategory}
                </div>
              </div>
              <div className="text-center mb-4">
                <div className="text-3xl font-bold text-blue-600">{Math.round(analytics.wordsPerMinute)}</div>
                <div className="text-sm text-gray-600">Words per Minute</div>
                <div className="text-xs text-gray-500 mt-1">Optimal: 140-180 WPM</div>
              </div>
              <p className="text-sm text-gray-600">{analytics.paceAnalysis.paceRecommendation}</p>
            </div>

            {/* Filler Words Summary */}
            <div className="bg-white border rounded-lg p-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">Speech Clarity</h4>
              <div className="text-center mb-4">
                <div className="text-3xl font-bold text-orange-600">{analytics.fillerWordAnalysis.fillerWordPercentage.toFixed(1)}%</div>
                <div className="text-sm text-gray-600">Filler Words</div>
                <div className="text-xs text-gray-500 mt-1">{analytics.fillerWordAnalysis.totalFillerWords} total occurrences</div>
              </div>
              <p className="text-sm text-gray-600">{analytics.fillerWordAnalysis.fillerWordFeedback}</p>
            </div>

            {/* Confidence */}
            <div className="bg-white border rounded-lg p-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">Confidence Level</h4>
              <div className="text-center mb-4">
                <div className="text-3xl font-bold text-purple-600">{analytics.confidenceAnalysis.confidenceScore.toFixed(1)}</div>
                <div className="text-sm text-gray-600">Confidence Score</div>
                <div className="text-xs text-gray-500 mt-1">Out of 10</div>
              </div>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div className="text-center p-2 bg-green-50 rounded">
                  <div className="font-bold text-green-600">{analytics.confidenceAnalysis.confidenceWords}</div>
                  <div className="text-green-800">Strong words</div>
                </div>
                <div className="text-center p-2 bg-red-50 rounded">
                  <div className="font-bold text-red-600">{analytics.confidenceAnalysis.uncertaintyWords}</div>
                  <div className="text-red-800">Uncertain words</div>
                </div>
              </div>
            </div>
          </div>

          {/* Recommendations */}
          <div className="bg-white border rounded-lg p-6">
            <h4 className="text-lg font-semibold text-gray-900 mb-4">🎯 Personalized Recommendations</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {analytics.recommendations.map((recommendation, index) => (
                <div key={index} className="p-4 bg-blue-50 rounded-lg border-l-4 border-blue-500">
                  <p className="text-sm text-blue-800">{recommendation}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Call to Action */}
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg p-6 text-white">
            <h4 className="text-xl font-semibold mb-2">🚀 Keep Improving!</h4>
            <p className="mb-4 opacity-90">Regular practice with speech analysis helps you become a more confident and effective communicator.</p>
            <div className="flex flex-wrap gap-4 text-sm">
              <div className="flex items-center">
                <span className="mr-2">📝</span>
                Practice daily for best results
              </div>
              <div className="flex items-center">
                <span className="mr-2">🎯</span>
                Focus on your lowest scoring areas
              </div>
              <div className="flex items-center">
                <span className="mr-2">📊</span>
                Track your progress over time
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// Helper function to calculate speech analytics
function calculateSpeechAnalytics(text: string, duration: number): SpeechAnalytics {
  const words = text.split(/\s+/).filter(word => word.length > 0)
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0)
  const uniqueWords = new Set(words.map(w => w.toLowerCase().replace(/[^a-z]/g, ''))).size
  
  // Calculate words per minute
  const wordsPerMinute = duration > 0 ? words.length / duration : 0
  
  // Analyze filler words
  const fillerWords = ['um', 'uh', 'ah', 'er', 'like', 'you know', 'so', 'well', 'okay', 'right']
  const fillerWordCounts: Record<string, number> = {}
  let totalFillerWords = 0
  
  const textLower = text.toLowerCase()
  fillerWords.forEach(filler => {
    const regex = new RegExp(`\\b${filler}\\b`, 'g')
    const matches = textLower.match(regex) || []
    if (matches.length > 0) {
      fillerWordCounts[filler] = matches.length
      totalFillerWords += matches.length
    }
  })
  
  const fillerWordPercentage = words.length > 0 ? (totalFillerWords / words.length) * 100 : 0
  
  // Calculate pace score
  const paceScore = wordsPerMinute >= 140 && wordsPerMinute <= 180 ? 10 :
                   wordsPerMinute >= 120 && wordsPerMinute < 140 ? 7 :
                   wordsPerMinute >= 180 && wordsPerMinute <= 200 ? 7 :
                   wordsPerMinute < 120 ? 6 : 5
  
  const paceCategory = wordsPerMinute >= 140 && wordsPerMinute <= 180 ? 'Optimal' :
                      wordsPerMinute < 120 ? 'Too Slow' :
                      wordsPerMinute > 200 ? 'Too Fast' :
                      wordsPerMinute < 140 ? 'Slow' : 'Fast'
  
  // Calculate filler word score
  const fillerWordScore = fillerWordPercentage < 2 ? 10 :
                         fillerWordPercentage < 5 ? 8 :
                         fillerWordPercentage < 8 ? 6 : 4
  
  // Calculate vocabulary metrics
  const vocabularyDiversity = words.length > 0 ? uniqueWords / words.length : 0
  const vocabularyScore = vocabularyDiversity > 0.7 ? 10 :
                         vocabularyDiversity > 0.5 ? 8 :
                         vocabularyDiversity > 0.3 ? 6 : 4
  
  // Analyze word complexity
  const simpleWords = words.filter(w => w.length <= 4).length
  const mediumWords = words.filter(w => w.length > 4 && w.length <= 7).length
  const complexWords = words.filter(w => w.length > 7).length
  
  // Calculate confidence score
  const confidenceWords = (textLower.match(/\b(definitely|certainly|absolutely|clearly|obviously)\b/g) || []).length
  const uncertaintyWords = (textLower.match(/\b(maybe|perhaps|possibly|might|could be|i think|i believe|i guess)\b/g) || []).length
  const confidenceScore = Math.max(1, Math.min(10, 5 + (confidenceWords * 0.5) - (uncertaintyWords * 0.3)))
  
  // Calculate overall score
  const overallScore = (paceScore + fillerWordScore + vocabularyScore + confidenceScore) / 4
  
  // Generate recommendations
  const recommendations = []
  if (paceScore < 8) {
    recommendations.push(`🏃‍♂️ Pace: Adjust your speaking speed. Current pace: ${Math.round(wordsPerMinute)} WPM`)
  }
  if (fillerWordScore < 8) {
    recommendations.push(`🚫 Reduce filler words: You used ${totalFillerWords} filler words (${fillerWordPercentage.toFixed(1)}% of speech)`)
  }
  if (vocabularyScore < 8) {
    recommendations.push(`📚 Expand vocabulary: Use more varied word choices to enhance engagement`)
  }
  if (confidenceScore < 7) {
    recommendations.push(`💪 Boost confidence: Use more definitive language and reduce uncertainty expressions`)
  }
  
  recommendations.push('🎯 Practice regularly: Daily 5-minute sessions help track improvement')
  recommendations.push('📖 Study great speakers: Learn from TED talks and professional presentations')
  
  return {
    overallScore,
    totalWords: words.length,
    wordsPerMinute,
    paceAnalysis: {
      paceCategory,
      paceScore,
      paceRecommendation: paceScore >= 8 ? 'Excellent speaking pace!' : 
                         paceCategory === 'Too Slow' ? 'Try to speak faster for better engagement' :
                         paceCategory === 'Too Fast' ? 'Slow down for better clarity' :
                         'Consider adjusting your pace slightly'
    },
    fillerWordAnalysis: {
      totalFillerWords,
      fillerWordPercentage,
      fillerWordScore,
      fillerWordFeedback: fillerWordScore >= 8 ? 'Great control of filler words!' :
                         'Practice pausing instead of using filler words',
      fillerWordCounts
    },
    vocabularyAnalysis: {
      uniqueWords,
      vocabularyDiversity,
      vocabularyScore,
      vocabularyFeedback: vocabularyScore >= 8 ? 'Excellent vocabulary diversity!' :
                         'Try using more varied vocabulary',
      wordComplexityDistribution: {
        'Simple (1-4 letters)': simpleWords,
        'Medium (5-7 letters)': mediumWords,
        'Complex (8+ letters)': complexWords
      }
    },
    confidenceAnalysis: {
      confidenceScore,
      confidenceFeedback: confidenceScore >= 8 ? 'You speak with great confidence!' :
                         'Use more definitive language to sound more confident',
      confidenceWords,
      uncertaintyWords
    },
    recommendations
  }
}

// Helper function to generate analytics report
function generateAnalyticsReport(analytics: SpeechAnalytics, transcription: string, fileName: string): string {
  return `
SPEECH ANALYTICS REPORT
=======================
File: ${fileName}
Generated: ${new Date().toLocaleString()}

OVERALL PERFORMANCE
-------------------
Overall Score: ${analytics.overallScore.toFixed(1)}/10
Total Words: ${analytics.totalWords}
Speaking Pace: ${analytics.wordsPerMinute.toFixed(0)} WPM (${analytics.paceAnalysis.paceCategory})

DETAILED ANALYSIS
-----------------
Speaking Pace: ${analytics.paceAnalysis.paceScore}/10
- ${analytics.paceAnalysis.paceRecommendation}

Speech Clarity: ${analytics.fillerWordAnalysis.fillerWordScore}/10
- Filler words: ${analytics.fillerWordAnalysis.totalFillerWords} (${analytics.fillerWordAnalysis.fillerWordPercentage.toFixed(1)}%)
- ${analytics.fillerWordAnalysis.fillerWordFeedback}

Vocabulary: ${analytics.vocabularyAnalysis.vocabularyScore}/10
- Unique words: ${analytics.vocabularyAnalysis.uniqueWords}
- Diversity: ${(analytics.vocabularyAnalysis.vocabularyDiversity * 100).toFixed(1)}%
- ${analytics.vocabularyAnalysis.vocabularyFeedback}

Confidence: ${analytics.confidenceAnalysis.confidenceScore.toFixed(1)}/10
- ${analytics.confidenceAnalysis.confidenceFeedback}

RECOMMENDATIONS
---------------
${analytics.recommendations.map(rec => `• ${rec}`).join('\n')}

ORIGINAL TRANSCRIPTION
----------------------
${analyticsText}
`
}
